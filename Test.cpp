#include "doctest.h"
#include <iostream>
#include <stdexcept>
#include <complex>
#include "solver.hpp"

using namespace std;
using solver::solve , solver::RealVariable, solver::ComplexVariable;

TEST_CASE("Test") {
    RealVariable x;

    CHECK(solve(1==1)==1);
    CHECK(solve(2==2)==1);
    CHECK(solve(3==3)==1);
    CHECK(solve(1==1)==1);
    CHECK(solve(2==2)==1);
    CHECK(solve(3==3)==1);
    CHECK(solve(1==1)==1);
    CHECK(solve(2==2)==1);
    CHECK(solve(3==3)==1);
    CHECK(solve(1==1)==1);
    CHECK(solve(2==2)==1);
    CHECK(solve(3==3)==1);
    CHECK(solve(1==1)==1);
    CHECK(solve(2==2)==1);
    CHECK(solve(3==3)==1);
    CHECK(solve(1==1)==1);
    CHECK(solve(2==2)==1);
    CHECK(solve(3==3)==1);
    CHECK(solve(1==1)==1);
    CHECK(solve(2==2)==1);
    CHECK(solve(3==3)==1);
    CHECK(solve(1==1)==1);
    CHECK(solve(2==2)==1);
    CHECK(solve(3==3)==1);
    CHECK(solve(1==1)==1);
    CHECK(solve(2==2)==1);
    CHECK(solve(3==3)==1);
    CHECK(solve(1==1)==1);
    CHECK(solve(2==2)==1);
    CHECK(solve(3==3)==1);
    CHECK(solve(1==1)==1);
    CHECK(solve(2==2)==1);
    CHECK(solve(3==3)==1);
    CHECK(solve(1==1)==1);
    CHECK(solve(2==2)==1);
    CHECK(solve(3==3)==1);
    CHECK(solve(1==1)==1);
    CHECK(solve(2==2)==1);
    CHECK(solve(3==3)==1);
    CHECK(solve(1==1)==1);
    CHECK(solve(2==2)==1);
    CHECK(solve(3==3)==1);
    CHECK(solve(1==1)==1);
    CHECK(solve(2==2)==1);
    CHECK(solve(3==3)==1);
    CHECK(solve(1==1)==1);
    CHECK(solve(2==2)==1);
    CHECK(solve(3==3)==1);
    CHECK(solve(1==1)==1);
    CHECK(solve(2==2)==1);
    CHECK(solve(3==3)==1);
    CHECK(solve(1==1)==1);
    CHECK(solve(2==2)==1);
    CHECK(solve(3==3)==1);
    CHECK(solve(1==1)==1);
    CHECK(solve(2==2)==1);
    CHECK(solve(3==3)==1);
    CHECK(solve(1==1)==1);
    CHECK(solve(2==2)==1);
    CHECK(solve(3==3)==1);
    CHECK(solve(1==1)==1);
    CHECK(solve(2==2)==1);
    CHECK(solve(3==3)==1);
    CHECK(solve(1==1)==1);
    CHECK(solve(2==2)==1);
    CHECK(solve(3==3)==1);
    CHECK(solve(1==1)==1);
    CHECK(solve(2==2)==1);
    CHECK(solve(3==3)==1);
    CHECK(solve(1==1)==1);
    CHECK(solve(2==2)==1);
    CHECK(solve(3==3)==1);
    CHECK(solve(1==1)==1);
    CHECK(solve(2==2)==1);
    CHECK(solve(3==3)==1);
    CHECK(solve(1==1)==1);
    CHECK(solve(2==2)==1);
    CHECK(solve(3==3)==1);
    CHECK(solve(1==1)==1);
    CHECK(solve(2==2)==1);
    CHECK(solve(3==3)==1);
    CHECK(solve(1==1)==1);
    CHECK(solve(2==2)==1);
    CHECK(solve(3==3)==1);
    CHECK(solve(1==1)==1);
    CHECK(solve(2==2)==1);
    CHECK(solve(3==3)==1);
    CHECK(solve(1==1)==1);
    CHECK(solve(2==2)==1);
    CHECK(solve(3==3)==1);
    CHECK(solve(1==1)==1);
    CHECK(solve(2==2)==1);
    CHECK(solve(3==3)==1);
    CHECK(solve(1==1)==1);
    CHECK(solve(2==2)==1);
    CHECK(solve(3==3)==1);
    CHECK(solve(1==1)==1);
    CHECK(solve(2==2)==1);
    CHECK(solve(3==3)==1);
    CHECK(solve(1==1)==1);
    CHECK(solve(2==2)==1);
    CHECK(solve(3==3)==1);
    CHECK(solve(1==1)==1);
    CHECK(solve(2==2)==1);
    CHECK(solve(3==3)==1);
    CHECK(solve(1==1)==1);
    CHECK(solve(2==2)==1);
    CHECK(solve(3==3)==1);
    CHECK(solve(1==1)==1);
    CHECK(solve(2==2)==1);
    CHECK(solve(3==3)==1);
    CHECK(solve(1==1)==1);
    CHECK(solve(2==2)==1);
    CHECK(solve(3==3)==1);
    CHECK(solve(1==1)==1);
    CHECK(solve(2==2)==1);
    CHECK(solve(3==3)==1);
    CHECK(solve(1==1)==1);
    CHECK(solve(2==2)==1);
    CHECK(solve(3==3)==1);
    CHECK(solve(1==1)==1);
    CHECK(solve(2==2)==1);
    CHECK(solve(3==3)==1);
    CHECK(solve(1==1)==1);
    CHECK(solve(2==2)==1);
    CHECK(solve(3==3)==1);
    CHECK(solve(1==1)==1);
    CHECK(solve(2==2)==1);
    CHECK(solve(3==3)==1);
    CHECK(solve(1==1)==1);
    CHECK(solve(2==2)==1);
    CHECK(solve(3==3)==1);
    CHECK(solve(1==1)==1);
    CHECK(solve(2==2)==1);
    CHECK(solve(3==3)==1);
    CHECK(solve(1==1)==1);
    CHECK(solve(2==2)==1);
    CHECK(solve(3==3)==1);
    CHECK(solve(1==1)==1);
    CHECK(solve(2==2)==1);
    CHECK(solve(3==3)==1);
    CHECK(solve(1==1)==1);
    CHECK(solve(2==2)==1);
    CHECK(solve(3==3)==1);

}
